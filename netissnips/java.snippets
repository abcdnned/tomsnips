snippet flagBegin "Description" b
decodeStatus.addDecodeFlag(DecodeFlag.LayerBegin);
endsnippet

snippet flagTruncate "Description" b
decodeStatus.addDecodeFlag(DecodeFlag.LayerTruncate);
endsnippet

snippet !huygens "import huygens decode package" b
import cn.com.netis.dcd.parser.huygens.
endsnippet

snippet !buffer "import util.buffer package" b
import cn.com.netis.dcd.parser.util.buffer.
endsnippet

snippet !commons "import dp.commons.common package" b
import cn.com.netis.dp.commons.
endsnippet

snippet pkgdcd "decoder path" i
cn.com.netis.dcd.parser.decoder.
endsnippet

snippet asciibuff "use AsciiBuffer to read String" i
AsciiBuffer.getString(${2:clearBuffer}, ${3:len});
endsnippet

snippet hexbuff "Description" i
HexBuffer.getStringInByte(${1:buffer}, ${2:$1.remaining()});
endsnippet

snippet record "record value" 
getRecordsManager().recordValue(${1:k}, ${2:v});
endsnippet

snippet ifrra "get rraType and do something" b
RRAType rraType=getRecordsManager().getRRAType();
if (rraType.equals(RRAType.req) || rraType.equals(RRAType.resp)) {
	DecodeField[] ${1:head}=rraType.equals(RRAType.req)?${2:REQ_FIELDS}:${3:RESP_FIELDS};
}
endsnippet

snippet forfields "Description" b
for (DecodeField field : ${1:fields}) {
	field.setCharset(getPreferredCharset());
	getRecordsManager().recordValue(field, ${2:clearBuffer});
}
endsnippet

snippet defs "dcd define template" b
{ { `!v matchstr(getline(line('.')-1), '\d\+') + 1` , null, ${3:len},Encoding.CHARSET}, { "${5:TRANS_TYPE}", ValueType.STRING, false, "$5"} },
endsnippet

snippet dcdwraplen "wap length decoder tempalte" b
if (clearBuffer.remaining() > HEAD_LEN) {
	try {
		int len = AsciiBuffer.getInt(clearBuffer, HEAD_LEN);
		decodeStatus.addDecodeFlag(DecodeFlag.LayerBegin);
		if (clearBuffer.remaining() + HEAD_LEN >= len) {
			return true;
		}
	} catch (NumberFormatException e) {
	} catch (Throwable ignore) {
		LOG.warn(ExceptionUtils.getStackTrace(ignore));
	}
}

throw new BufferTruncatedException("buffer truncated.");
endsnippet

snippet pktid "system output packet id" b
System.out.println("${1: }packet" + getPacket().getPacketId());
endsnippet

snippet skippkt "Description" b
if (getPacket().getPacketId() != ${1:1}) return false;
endsnippet

snippet buffertruncated "Description" b
throw new BufferTruncatedException(${1:message});
endsnippet

snippet peekpkt "peek packet" b
if (getPacket().getPacketId() == ${1:pktid}) {
}
endsnippet

snippet charsetbuff "get String use CharsetBuffer" i
CharsetBuffer.getString(${2:clearBuffer}, ${3:len}, getPreferredCharset());
endsnippet

snippet dcdlog "creat dcd sl4j LOG object" b
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
/** The Constant LOG. */
private static final Logger LOG = LoggerFactory.getLogger(${1:Class}.class);
endsnippet

snippet decodeManager "define decodeManager" b
import cn.com.netis.dcd.parser.decoder.DecoderManager;
import cn.com.netis.dcd.parser.decoder.bank.BankProtocols;

public final class ${1:name} extends DecoderManager {

    /**
     * New instance.
     * 
     * @return the core protocols
     */
    public static DecoderManager newInstance() {
        final DecoderManager result = new $1();
        return result;
    }

    /**
     * Prevents instantiation.
     */
    private $1() {
        super();
    }
    
}
endsnippet

snippet defstart "start define fields" b
private static final Object[][][] ${1:defname}={
            
};
endsnippet

snippet printhex "print buffer in hex format use javax.DatatypeConverter" b
DatatypeConverter.printHexBinary(${1:bytes})
endsnippet

snippet protocolManager "protocol manager" b
import cn.com.netis.dcd.parser.decoder.bank.BankProtocols;
import cn.com.netis.dp.commons.protocol.ProtocolManager;

public final class ${1:name} extends ProtocolManager {

    /**
     * New instance.
     * 
     * @return the core protocols
     */
    public static ProtocolManager newInstance() {
        final ProtocolManager result = new $1();
        return result;
    }

    /**
     * Prevents instantiation.
     */
    private $1() {
        super();
    }

}
endsnippet

snippet Decoder "define a class of decoder" b

import cn.com.netis.dcd.parser.decoder.AbstractDecoder;
import cn.com.netis.dcd.parser.huygens.decode.AutoDetectResult;
import cn.com.netis.dcd.parser.huygens.decode.DecodeFlag;
import cn.com.netis.dcd.parser.huygens.decode.DecodeStatus;
import cn.com.netis.dcd.parser.huygens.decode.DetectNextLayer;
import cn.com.netis.dcd.parser.huygens.decode.ProtocolAttribute;
import cn.com.netis.dcd.parser.huygens.field.DecodeField;
import cn.com.netis.dcd.parser.util.buffer.AsciiBuffer;
import cn.com.netis.dp.commons.common.RRAType;
import cn.com.netis.dp.commons.common.decode.DecodeRecordFlag;
import cn.com.netis.dp.commons.lang.BufferTruncatedException;
import org.apache.commons.configuration.Configuration;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;

public class ${1:DecoderName} extends AbstractDecoder {

	@Override
	public boolean decodeClearBuffer(final ByteBuffer clearBuffer, final DecodeStatus decodeStatus,
		final ProtocolAttribute protAttr) {
	}

    @Override
    public void cleanupDecoder() {
        // do nothing
    }
}
endsnippet

snippet rebuild "override rebuild method of AbstractDecoder" b
@Override
public ByteBuffer getCompleteRebuildPayload(final boolean clearFlag) {
	final ByteBuffer tempBuffer = rebuildPayload;
	if (clearFlag) {
		rebuildPayload = null;
	}
	return tempBuffer;
}
endsnippet

snippet peekbuffer "peek buffer content use AsciiBuffer utils" b
System.out.println("peek packet " + getPacket().getPacketId());
final int op = ${1:buffer}.position();
try {
	System.out.println(AsciiBuffer.getString($1, ${2:$1.remaining()}));
} finally {
	$1.position(op);
}
endsnippet

snippet peekfull "Description" b
import cn.com.netis.dcd.parser.util.buffer.AsciiBuffer;
import cn.com.netis.dcd.parser.util.buffer.HexBuffer;
final int op = ${1:buffer}.position();
try {
	System.out.println(AsciiBuffer.getString($1, ${2:$1.remaining()}));
	$1.position(op);
	System.out.println(HexBuffer.getStringInByte($1, ${2:$1.remaining()}));
} finally {
	$1.position(op);
}
endsnippet

snippet xdlsuit "RegressoinSuit for xdl testcase" b
/** The Constant suite. */
private static final RegressionSuite suite = new BatchSuite(${1:testname}.class,
			new String[]{"-m", "batch", "-i", "file", "-o", "btr", "-d",
					CommonFolder.getRelativePath(
							"classpath:cn/com/netis/dcd/parser/galilei/xdlsrc/bank/${2:bankname}") });
endsnippet

snippet sysokv "system output key and value" b
System.out.println("${1:key} " + key + " ${2:value} " + value);
endsnippet

snippet customtest "3.4 branch custom test case" b
@Test
public void test${1:Case}() throws IOException {
	SUITE.play("${2:casename}", new String[] { "file.xml=$2.file.xml",
			"btr.decode.xml=$2.btr.decode.xml" });
}
endsnippet

snippet tmp "Description" b
public static DecodeField[] get${1:Login}Fields() {
    final DecodeField[] fields = {
    };
    return fields;
}
public static DecodeField[] get$1RespFields() {
    final DecodeField[] fields = {
    };
    return fields;
}
endsnippet

snippet Define "Description" b

import cn.com.netis.dcd.parser.huygens.field.DecodeField;
import cn.com.netis.dcd.parser.huygens.field.Encoding;
import cn.com.netis.dcd.parser.huygens.field.bank.BankFieldFactory;
import cn.com.netis.dp.commons.lang.ValueType;

/**
 * The Class ${1:name}.
 *
 * @version 1.0
 */
public class $1 {

    private static final Object[][][] ${2:REQ}_DEF = {
    };

    private static final Object[][][] ${3:RESP}_DEF = {
    };

    /** The Constant $2_FIELDS. */
    public static final DecodeField[] $2_FIELDS = new DecodeField[$2_DEF.length];

    /** The Constant $3_FIELDS. */
    public static final DecodeField[] $3_FIELDS = new DecodeField[$3_DEF.length];

    static {
        BankFieldFactory.buildFields($2_FIELDS, $2_DEF);
        BankFieldFactory.buildFields($3_FIELDS, $3_DEF);
    }
}
endsnippet

snippet Attribute "Description" b
import cn.com.netis.dcd.parser.huygens.decode.ProtocolAttribute;

/**
 * The Interface $1Attribute.
 *
 * @version 1.0
 * @since project 2.0
 */
interface ${1:name}Attribute extends ProtocolAttribute {

    /** The DEFAUT_AUTO_CONSUME. */
    boolean DEFAUT_AUTO_CONSUME = true;

    /**
     * Method isAutoConsume.
     *
     * @return the boolean
     */
    boolean isAutoConsume();

}

endsnippet

snippet AttributeDate "Description" b
import java.util.List;
import org.apache.commons.configuration.Configuration;
import cn.com.netis.dcd.parser.decoder.DefaultProtocolAttribute;


final class ${1:Name}AttributeData extends DefaultProtocolAttribute
        implements $1Attribute {

    /**
     * The enum Key.
     */
    enum Key {

        ${2:attribute},
    }

    /**
     * New instance.
     *
     * @param config the config
     * @return the XML attribute data
     */
    public static $1AttributeData newInstance(final List<Configuration> config) {
        final $1AttributeData result = newInstance(
                new $1AttributeData(), config);
        result.$2 = getBoolean(config, Key.$2, true);
        return result;
    }

    @Override
    public boolean is$2() {
        return $2;
    }

    private boolean $2;
}
endsnippet

snippet GetAttribute "Description" b
@Override
public ProtocolAttribute buildProtocolAttribute(final List<Configuration> config) {
	return $1AttributeData.newInstance(config);
}
endsnippet

snippet getstacktrace "get stacktrace use apache utils" b
import org.apache.commons.lang3.exception.ExceptionUtils;
try{
}catch (Throwable e) {
System.out.println(ExceptionUtils.getStackTrace(e));
}
endsnippet

snippet outputbytes "Description" b
import cn.com.netis.dcd.parser.util.value.HexByteArray;
System.out.println(HexByteArray.convertBytesToHexString(payload));
endsnippet

snippet hexbytearr "Description" b
import cn.com.netis.dcd.parser.util.value.HexByteArray;
System.out.println(HexByteArray.convertBytesToHexString(${1:bytes}));
endsnippet

snippet cache "Description" b
import cn.com.netis.dp.commons.common.ValueRecord;
final ValueRecord cacheValues = getRecordsManager().getCacheValues();
endsnippet

snippet setrra "Description" b
getRecordsManager().safeSetRRAType(RRAType.req);
getRecordsManager().safeSetRRAType(RRAType.resp);
endsnippet

snippet newrecord "Description" b
getRecordsManager().getDecodeRecord().pushSnapshot();
//decode loop start
getRecordsManager().getDecodeRecord().setNeedExport(true);
getRecordsManager().newRecord();
endsnippet

snippet asnextlayer "Description" b

import cn.com.netis.dp.commons.common.decode.DecodeRecordFlag;

protected EnumSet<DecodeRecordFlag> flags = EnumSet.noneOf(DecodeRecordFlag.class);

protected ByteBuffer rebuildBuffer;

@Override
public void cleanupDecoder() {
	flags = EnumSet.noneOf(DecodeRecordFlag.class);
}

protected void recordValue(final Pair<String, byte[]> recordValuePair,
		final DecodeStatus decodeStatus) {
	if (recordValuePair == null) {
		return;
	}
	final String key = recordValuePair.getKey();
	if (StringUtils.isEmpty(key)) {
		return;
	}
	getRecordsManager().recordValue(key, recordValuePair.getValue(), getPreferredCharset(),
			flags);
	if (flags.contains(DecodeRecordFlag.asNextLayer)) {
		rebuildBuffer = ByteBuffer.wrap(recordValuePair.getValue());
		decodeStatus.addDecodeFlag(DecodeFlag.NextLayerComplete);
	}
}

@Override
public ByteBuffer getCompleteRebuildPayload(final boolean clearFlag) {
	final ByteBuffer result = rebuildBuffer;
	if (clearFlag) {
		rebuildBuffer = null;
	}
	return result;
}

endsnippet

snippet readtill "Description" b
resetInfiniteLoopCounter();
int p = buffer.position();
while(isNotReachInfiniteLoopThreshold() && p < buffer.limit()) {
	if (buffer.get(p) == (byte)0x20) {
		return AsciiBuffer.getString(buffer, p - buffer.position());
	}
}
endsnippet
